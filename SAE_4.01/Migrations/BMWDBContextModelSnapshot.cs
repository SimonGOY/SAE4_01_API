// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAE_4._01.Models.EntityFramework;

#nullable disable

namespace SAE_4._01.Migrations
{
    [DbContext(typeof(BMWDBContext))]
    partial class BMWDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Accessoire", b =>
                {
                    b.Property<int>("IdAccessoire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("acc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAccessoire"));

                    b.Property<string>("DetailAccessoire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("acc_detail");

                    b.Property<int>("IdCatAcc")
                        .HasColumnType("integer")
                        .HasColumnName("cta_id");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    b.Property<string>("NomAccessoire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("acc_nom");

                    b.Property<string>("PhotoAccessoire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("acc_photo");

                    b.Property<decimal>("PrixAccessoire")
                        .HasColumnType("numeric")
                        .HasColumnName("acc_prix");

                    b.HasKey("IdAccessoire")
                        .HasName("pk_acc");

                    b.HasIndex("IdCatAcc");

                    b.HasIndex("IdMoto");

                    b.ToTable("t_e_accessoire_acc");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Adresse", b =>
                {
                    b.Property<int>("NumAdresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adr_num");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumAdresse"));

                    b.Property<string>("AdresseAdresse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("adr_adresse");

                    b.Property<string>("NomPays")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pay_nom");

                    b.HasKey("NumAdresse")
                        .HasName("pk_adr");

                    b.HasIndex("NomPays");

                    b.ToTable("t_e_adresse_adr");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Caracteristique", b =>
                {
                    b.Property<int>("IdCaracteristique")
                        .HasColumnType("integer")
                        .HasColumnName("car_id");

                    b.Property<int>("IdCatCaracteristique")
                        .HasColumnType("integer")
                        .HasColumnName("ctc_idcat");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_idmoto");

                    b.Property<string>("NomCaracteristique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("car_nom");

                    b.Property<string>("ValeurCaracteristique")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_valeur");

                    b.HasKey("IdCaracteristique")
                        .HasName("pk_car");

                    b.HasIndex("IdCatCaracteristique");

                    b.ToTable("t_e_caracteristique_car");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieAccessoire", b =>
                {
                    b.Property<int>("IdCatAcc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cta_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCatAcc"));

                    b.Property<string>("NomCatAcc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cta_nom");

                    b.HasKey("IdCatAcc")
                        .HasName("pk_cta");

                    b.ToTable("t_e_categorieaccessoire_cta");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieCaracteristique", b =>
                {
                    b.Property<int>("IdCatCaracteristique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ctc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCatCaracteristique"));

                    b.Property<string>("NomCatCaracteristique")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ctc_nom");

                    b.HasKey("IdCatCaracteristique")
                        .HasName("pk_ctc");

                    b.ToTable("t_e_categoriecaracteristique_ctc");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieEquipement", b =>
                {
                    b.Property<int>("IdCatEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cte_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCatEquipement"));

                    b.Property<int>("CatIdCatEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("cte_catidcatequipement");

                    b.Property<string>("LibelleCatEquipement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cte_libelle");

                    b.HasKey("IdCatEquipement")
                        .HasName("pk_cte");

                    b.HasIndex("CatIdCatEquipement");

                    b.ToTable("t_e_categorieequipement_cte");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdClient"));

                    b.Property<string>("Civilite")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("clt_civilite");

                    b.Property<DateTime>("DateNaissanceClient")
                        .HasColumnType("DATE")
                        .HasColumnName("clt_datenaissance");

                    b.Property<string>("EmailClient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clt_email");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clt_nom");

                    b.Property<int>("NumAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("adr_numeroadresse");

                    b.Property<string>("PrenomClient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clt_prenom");

                    b.HasKey("IdClient")
                        .HasName("pk_clt");

                    b.HasIndex("NumAdresse");

                    b.ToTable("t_e_client_clt");

                    b.HasCheckConstraint("ck_clt_age", "age((clt_datenaissance)::timestamp with time zone) >= '18 years'::interval");

                    b.HasCheckConstraint("ck_clt_email", "clt_email ~~ '%_@__%.__%'::text");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Collection", b =>
                {
                    b.Property<int>("IdCollection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cln_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCollection"));

                    b.Property<string>("NomCollection")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cln_nom");

                    b.HasKey("IdCollection")
                        .HasName("pk_cln");

                    b.ToTable("t_e_collection_cln");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Coloris", b =>
                {
                    b.Property<int>("IdColoris")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cls_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdColoris"));

                    b.Property<string>("NomColoris")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cls_nom");

                    b.HasKey("IdColoris")
                        .HasName("pk_cls");

                    b.ToTable("t_e_coloris_cls");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Commande", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cmd_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCommande"));

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("DATE")
                        .HasColumnName("cmd_date");

                    b.Property<DateTime>("Etat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cmd_etat");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.HasKey("IdCommande")
                        .HasName("pk_cmd");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_commande_cmd");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Concessionnaire", b =>
                {
                    b.Property<int>("IdConcessionnaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("con_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdConcessionnaire"));

                    b.Property<string>("AdresseConcessionnaire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("con_adresse");

                    b.Property<string>("EmailConcessionnaire")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("con_email");

                    b.Property<string>("NomConcessionnaire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("con_nom");

                    b.Property<string>("SiteConcessionnaire")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("con_site");

                    b.Property<string>("TelephoneConcessionnaire")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("con_telephone");

                    b.HasKey("IdConcessionnaire")
                        .HasName("pk_con");

                    b.ToTable("t_e_concessionnaire_con");

                    b.HasCheckConstraint("ck_con_email", "(con_email)::text ~~ '%_@__%.__%'::text");

                    b.HasCheckConstraint("ck_con_telephone", "(con_telephone)::text ~'^(01|02|03|04|05|09)\\d{8}$'::text");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ContactInfo", b =>
                {
                    b.Property<int>("IdContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ctf_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdContact"));

                    b.Property<DateTime>("DateNaissanceContact")
                        .HasColumnType("DATE")
                        .HasColumnName("ctf_datenaissance");

                    b.Property<string>("EmailContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ctf_email");

                    b.Property<int>("IdOffre")
                        .HasColumnType("integer")
                        .HasColumnName("ofr_id");

                    b.Property<string>("NomContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ctf_nom");

                    b.Property<string>("PrenomContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ctf_prenom");

                    b.Property<string>("TelContact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ctf_tel");

                    b.HasKey("IdContact")
                        .HasName("pk_ctf");

                    b.HasIndex("IdOffre");

                    b.ToTable("t_e_contactinfo_ctf");

                    b.HasCheckConstraint("ck_ctf_datenaissance", "age((ctf_datenaissance)::timestamp with time zone) >= '18 years'::interval");

                    b.HasCheckConstraint("ck_ctf_email", "(ctf_email)::text ~~'%_@__%.__%'::text");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ContenuCommande", b =>
                {
                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("equ_id");

                    b.Property<int>("IdTaille")
                        .HasColumnType("integer")
                        .HasColumnName("tle_id");

                    b.Property<int>("IdColoris")
                        .HasColumnType("integer")
                        .HasColumnName("cls_id");

                    b.Property<int>("IdCommande")
                        .HasColumnType("integer")
                        .HasColumnName("cmd_id");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("equ_quantite");

                    b.HasKey("IdEquipement", "IdTaille", "IdColoris", "IdCommande")
                        .HasName("pk_ccm");

                    b.HasIndex("IdColoris");

                    b.HasIndex("IdCommande");

                    b.HasIndex("IdTaille");

                    b.ToTable("t_e_contenu_commande_ccm");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Couleur", b =>
                {
                    b.Property<int>("IdCouleur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCouleur"));

                    b.Property<string>("DescriptionCouleur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clr_description");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    b.Property<string>("MotoCouleur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clr_moto");

                    b.Property<string>("NomCouleur")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clr_nom");

                    b.Property<string>("PhotoCouleur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clr_photo");

                    b.Property<double>("PrixCouleur")
                        .HasColumnType("double precision")
                        .HasColumnName("clr_prix");

                    b.HasKey("IdCouleur")
                        .HasName("pk_clr");

                    b.HasIndex("IdMoto");

                    b.ToTable("t_e_couleur_clr");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.DemandeEssai", b =>
                {
                    b.Property<int>("IdDemandeEssai")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dmd_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDemandeEssai"));

                    b.Property<string>("DescriptifDemandeEssai")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dmd_descriptif");

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("con_id");

                    b.Property<int>("IdContact")
                        .HasColumnType("integer")
                        .HasColumnName("ctf_id");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    b.HasKey("IdDemandeEssai")
                        .HasName("pk_dmd");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_e_demandeessai_dmd");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Equipement", b =>
                {
                    b.Property<int>("IdEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("equ_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEquipement"));

                    b.Property<string>("DescriptionEquipement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("equ_desc");

                    b.Property<int>("DureeGarantie")
                        .HasColumnType("integer")
                        .HasColumnName("equ_dureegarantie");

                    b.Property<int>("IdCatEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("cte_idcatequipement");

                    b.Property<int>("IdCollection")
                        .HasColumnType("integer")
                        .HasColumnName("cln_idcollection");

                    b.Property<string>("NomEquipement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("equ_nom");

                    b.Property<float>("PrixEquipement")
                        .HasColumnType("real")
                        .HasColumnName("equ_prix");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("equ_segment");

                    b.Property<string>("SexeEquipement")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("equ_sexe");

                    b.Property<bool>("Tendance")
                        .HasColumnType("boolean")
                        .HasColumnName("equ_tendance");

                    b.HasKey("IdEquipement")
                        .HasName("pk_equ");

                    b.HasIndex("IdCatEquipement");

                    b.HasIndex("IdCollection");

                    b.ToTable("t_e_equipement_equ");

                    b.HasCheckConstraint("ck_eq_sexe", "(((equ_sexe)::text = 'f'::text) OR ((equ_sexe)::text = 'h'::text) OR ((equ_sexe)::text = 'uni'::text))");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.EstInclus", b =>
                {
                    b.Property<int>("IdOption")
                        .HasColumnType("integer")
                        .HasColumnName("opt_id");

                    b.Property<int>("IdStyle")
                        .HasColumnType("integer")
                        .HasColumnName("sty_id");

                    b.HasKey("IdOption", "IdStyle")
                        .HasName("pk_ecl");

                    b.HasIndex("IdStyle");

                    b.ToTable("t_j_estinclus_ecl");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.EstLie", b =>
                {
                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("equ_idequipement");

                    b.Property<int>("EquIdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("equ_equidequipement");

                    b.HasKey("IdEquipement", "EquIdEquipement")
                        .HasName("pk_eli");

                    b.ToTable("t_j_estlie_eli");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.GammeMoto", b =>
                {
                    b.Property<int>("IdGamme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("gam_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGamme"));

                    b.Property<string>("LibelleGamme")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("gam_libelle");

                    b.HasKey("IdGamme")
                        .HasName("pk_gam");

                    b.ToTable("t_e_gammemoto_gam");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Garage", b =>
                {
                    b.Property<int>("IdMotoConfigurable")
                        .HasColumnType("integer")
                        .HasColumnName("mcf_id");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.HasKey("IdMotoConfigurable", "IdClient")
                        .HasName("pk_grg");

                    b.HasIndex("IdClient");

                    b.ToTable("t_r_garage_grg");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.InfoCB", b =>
                {
                    b.Property<int>("IdCarte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("icb_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCarte"));

                    b.Property<string>("DateExpiration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icb_dateexpiration");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<string>("NumCarte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icb_numcarte");

                    b.Property<string>("TitulaireCompte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icb_titulairecompte");

                    b.HasKey("IdCarte")
                        .HasName("pk_icb");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_infocb_icb");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Media", b =>
                {
                    b.Property<int>("IdMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("med_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMedia"));

                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("equ_idequipement");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_idmoto");

                    b.Property<int>("IdPresentation")
                        .HasColumnType("integer")
                        .HasColumnName("pre_idpresentation");

                    b.Property<string>("LienMedia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("med_lienmedia");

                    b.HasKey("IdMedia")
                        .HasName("pk_med");

                    b.HasIndex("IdEquipement");

                    b.HasIndex("IdMoto");

                    b.HasIndex("IdPresentation");

                    b.ToTable("t_e_media_med");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ModeleMoto", b =>
                {
                    b.Property<int>("IdMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMoto"));

                    b.Property<string>("DescriptifMoto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mod_desc");

                    b.Property<int>("IdGamme")
                        .HasColumnType("integer")
                        .HasColumnName("gam_idgamme");

                    b.Property<string>("NomMoto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mod_nommoto");

                    b.Property<float>("PrixMoto")
                        .HasColumnType("real")
                        .HasColumnName("mod_prix");

                    b.HasKey("IdMoto")
                        .HasName("pk_mod");

                    b.HasIndex("IdGamme");

                    b.ToTable("t_e_modelemoto_mod");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.MotoConfigurable", b =>
                {
                    b.Property<int>("IdMotoConfigurable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mcf_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMotoConfigurable"));

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    b.HasKey("IdMotoConfigurable")
                        .HasName("pk_mcf");

                    b.HasIndex("IdMoto");

                    b.ToTable("t_r_motoconfigurable_mcf");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.MotoDisponible", b =>
                {
                    b.Property<int>("IdMotoDisponible")
                        .HasColumnType("integer")
                        .HasColumnName("mdp_id");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_idmoto");

                    b.Property<float>("PrixMotoDisponible")
                        .HasColumnType("real")
                        .HasColumnName("mdp_prix");

                    b.HasKey("IdMotoDisponible")
                        .HasName("pk_mdp");

                    b.ToTable("t_e_motodisponible_mdp");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Offre", b =>
                {
                    b.Property<int>("IdOffre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ofr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOffre"));

                    b.Property<bool>("Assurance")
                        .HasColumnType("boolean")
                        .HasColumnName("ofr_assurance");

                    b.Property<string>("FinancementOffre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ofr_financement");

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("con_id");

                    b.Property<int>("IdMotoConfigurable")
                        .HasColumnType("integer")
                        .HasColumnName("mcf_id");

                    b.HasKey("IdOffre")
                        .HasName("pk_ofr");

                    b.HasIndex("IdConcessionnaire");

                    b.HasIndex("IdMotoConfigurable");

                    b.ToTable("t_e_offre_ofr");

                    b.HasCheckConstraint("ck_ofr_financement", "((((ofr_financement)::text = 'Sans Financement'::text) OR ((ofr_financement)::text = 'Financement Particulier'::text) OR ((ofr_financement)::text = 'Financement Professionnel'::text)))");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Option", b =>
                {
                    b.Property<int>("IdOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("opt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOption"));

                    b.Property<string>("DetailOption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("opt_detail");

                    b.Property<string>("NomOption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("opt_nom");

                    b.Property<string>("PhotoOption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("opt_photo");

                    b.Property<decimal>("PrixOption")
                        .HasColumnType("numeric")
                        .HasColumnName("opt_prix");

                    b.HasKey("IdOption")
                        .HasName("pk_opt");

                    b.HasIndex(new[] { "NomOption", "DetailOption" }, "uq_opt_nom_detail")
                        .IsUnique();

                    b.ToTable("t_e_option_opt");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Pack", b =>
                {
                    b.Property<int>("IdPack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pck_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPack"));

                    b.Property<string>("DescriptionPack")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pck_description");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    b.Property<string>("NomPack")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("pck_nom");

                    b.Property<string>("PhotoPack")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pck_photo");

                    b.Property<decimal>("PrixPack")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("pck_prix");

                    b.HasKey("IdPack")
                        .HasName("pk_pck");

                    b.HasIndex(new[] { "IdMoto" }, "uq_pck_mod_id")
                        .IsUnique();

                    b.HasIndex(new[] { "NomPack" }, "uq_pck_nom")
                        .IsUnique();

                    b.ToTable("t_e_pack_pck");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Parametres", b =>
                {
                    b.Property<string>("NomParametre")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("par_nom");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("par_description");

                    b.HasKey("NomParametre")
                        .HasName("pk_par");

                    b.ToTable("t_e_parametre_par");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Pays", b =>
                {
                    b.Property<string>("NomPays")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pay_nom");

                    b.HasKey("NomPays")
                        .HasName("pk_pay");

                    b.ToTable("t_e_pays_pay");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Prefere", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("con_id");

                    b.HasKey("IdClient", "IdConcessionnaire")
                        .HasName("pk_prf");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_r_prefere_prf");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.PresentationEquipement", b =>
                {
                    b.Property<int>("IdPresentation")
                        .HasColumnType("integer")
                        .HasColumnName("pre_id");

                    b.Property<int>("IdColoris")
                        .HasColumnType("integer")
                        .HasColumnName("col_idcoloris");

                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("equ_idequipement");

                    b.HasKey("IdPresentation")
                        .HasName("pk_pre");

                    b.HasIndex("IdColoris");

                    b.ToTable("t_r_presentationequipement_pre");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Prive", b =>
                {
                    b.Property<int>("IdPrive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPrive"));

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.HasKey("IdPrive")
                        .HasName("pk_prv");

                    b.HasIndex(new[] { "IdClient" }, "uq_prv_clt_id")
                        .IsUnique();

                    b.ToTable("t_e_prive_prv");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Professionnel", b =>
                {
                    b.Property<int>("IdPro")
                        .HasColumnType("integer")
                        .HasColumnName("pro_id");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<string>("NomCompagnie")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pro_nomcompagnie");

                    b.HasKey("IdPro")
                        .HasName("pk_pro");

                    b.HasIndex(new[] { "IdClient" }, "uq_pro_clt_id")
                        .IsUnique();

                    b.ToTable("t_e_professionnel_pro");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .HasColumnType("integer")
                        .HasColumnName("res_id");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("date")
                        .HasColumnName("res_dateres");

                    b.Property<string>("FinancementReservation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("res_financement");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_idclient");

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("con_idconcessionnaire");

                    b.Property<int>("IdMotoDisponible")
                        .HasColumnType("integer")
                        .HasColumnName("mdp_idmoto");

                    b.HasKey("IdReservation")
                        .HasName("pk_res");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_e_reservation_res");

                    b.HasCheckConstraint("ck_res_financement", "((((res_financement)::text = 'Comptant'::text) OR ((res_financement)::text = 'LLD'::text) OR ((res_financement)::text = 'Crédit'::text)))");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.SeCompose", b =>
                {
                    b.Property<int>("IdPack")
                        .HasColumnType("integer")
                        .HasColumnName("pck_id");

                    b.Property<int>("IdOption")
                        .HasColumnType("integer")
                        .HasColumnName("opt_id");

                    b.HasKey("IdPack", "IdOption")
                        .HasName("pk_scp");

                    b.HasIndex("IdOption");

                    b.ToTable("t_j_se_compose_scp");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Specifie", b =>
                {
                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("spe_idmoto");

                    b.Property<int>("IdOption")
                        .HasColumnType("integer")
                        .HasColumnName("opt_id");

                    b.Property<int>("IdMotoConfigurable")
                        .HasColumnType("integer")
                        .HasColumnName("mcf_id");

                    b.HasKey("IdMoto", "IdOption")
                        .HasName("pk_spe");

                    b.HasIndex("IdMotoConfigurable");

                    b.HasIndex("IdOption");

                    b.ToTable("t_j_specifie_spe");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Stock", b =>
                {
                    b.Property<int>("IdTaille")
                        .HasColumnType("integer")
                        .HasColumnName("tle_id");

                    b.Property<int>("IdColoris")
                        .HasColumnType("integer")
                        .HasColumnName("cls_id");

                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("equ_id");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("stk_quantite");

                    b.HasKey("IdTaille", "IdColoris", "IdEquipement")
                        .HasName("pk_stk");

                    b.HasIndex("IdColoris");

                    b.HasIndex("IdEquipement");

                    b.ToTable("t_e_stock_stk");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Style", b =>
                {
                    b.Property<int>("IdStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sty_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStyle"));

                    b.Property<string>("DescriptionStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sty_description");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mod_id");

                    b.Property<string>("NomStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sty_nom");

                    b.Property<string>("PhotoMoto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sty_photomoto");

                    b.Property<string>("PhotoStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sty_photo");

                    b.Property<double>("PrixStyle")
                        .HasColumnType("double precision")
                        .HasColumnName("sty_prix");

                    b.HasKey("IdStyle")
                        .HasName("pk_sty");

                    b.HasIndex("IdMoto");

                    b.HasIndex(new[] { "NomStyle", "DescriptionStyle" }, "uq_sty_nom_description")
                        .IsUnique();

                    b.ToTable("t_e_style_sty");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Taille", b =>
                {
                    b.Property<int>("IdTaille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tle_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTaille"));

                    b.Property<string>("DescTaille")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("tle_description");

                    b.Property<string>("LibelleTaille")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tle_libelle");

                    b.HasKey("IdTaille")
                        .HasName("pk_tle");

                    b.ToTable("t_r_taille_tle");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Telephone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tel_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Fonction")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("tel_fonction");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<string>("NumTelephone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel_num");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("tel_type");

                    b.HasKey("Id")
                        .HasName("pk_tel");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_telephone_tel");

                    b.HasCheckConstraint("ck_tel_fonction", "((((tel_fonction)::text = 'Privé'::text) OR ((tel_fonction)::text = 'Professionnel'::text)))");

                    b.HasCheckConstraint("ck_tel_num", "((((tel_fonction)::text = 'Privé'::text) OR ((tel_fonction)::text = 'Professionnel'::text)))");

                    b.HasCheckConstraint("ck_tel_type", "((((tel_type)::text = 'Fixe'::text) OR ((tel_type)::text = 'Mobile'::text)))");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Transaction", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tct_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTransaction"));

                    b.Property<int>("IdCommande")
                        .HasColumnType("integer")
                        .HasColumnName("cmd_id");

                    b.Property<decimal>("Montant")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("tct_montant");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("tct_type");

                    b.HasKey("IdTransaction")
                        .HasName("pk_tct");

                    b.HasIndex("IdCommande");

                    b.ToTable("t_h_transaction_tct");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATE")
                        .HasColumnName("usr_createdat");

                    b.Property<bool>("DoubleAuth")
                        .HasColumnType("boolean")
                        .HasColumnName("usr_doubleauth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("usr_email");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("usr_iscomplete");

                    b.Property<DateTime>("LastConnected")
                        .HasColumnType("DATE")
                        .HasColumnName("usr_lastconnected");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usr_password");

                    b.Property<string>("RememberToken")
                        .HasColumnType("text")
                        .HasColumnName("usr_remembertoken");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATE")
                        .HasColumnName("usr_updatedat");

                    b.HasKey("Id")
                        .HasName("pk_usr");

                    b.HasIndex("IdClient");

                    b.ToTable("t_e_users_usr");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Accessoire", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.CategorieAccessoire", "CateAccessoire")
                        .WithMany("AccessoireCategorise")
                        .HasForeignKey("IdCatAcc")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_acc_cta");

                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleAccessoire")
                        .WithMany("AccessoireMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_acc_mod");

                    b.Navigation("CateAccessoire");

                    b.Navigation("ModeleAccessoire");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Adresse", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Pays", "PaysAdresse")
                        .WithMany("AdressePays")
                        .HasForeignKey("NomPays")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_adr_pay");

                    b.Navigation("PaysAdresse");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Caracteristique", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoCaracteristique")
                        .WithMany("CaracteristiqueModeleMoto")
                        .HasForeignKey("IdCaracteristique")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_car_mod");

                    b.HasOne("SAE_4._01.Models.EntityFramework.CategorieCaracteristique", "CategorieCaracteristiqueCaracteristique")
                        .WithMany("CaracteristiqueCategorieCaracteristique")
                        .HasForeignKey("IdCatCaracteristique")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_car_ctc");

                    b.Navigation("CategorieCaracteristiqueCaracteristique");

                    b.Navigation("ModeleMotoCaracteristique");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieEquipement", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.CategorieEquipement", "CategorieEquipementCategorieEquipementFK")
                        .WithMany("CategorieEquipementCategorieEquipementProperty")
                        .HasForeignKey("CatIdCatEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cte_cte");

                    b.Navigation("CategorieEquipementCategorieEquipementFK");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Client", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Adresse", "AdresseClient")
                        .WithMany("ClientAdresse")
                        .HasForeignKey("NumAdresse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_clt_adr");

                    b.Navigation("AdresseClient");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Commande", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientCommande")
                        .WithMany("CommandeClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cmd_clt");

                    b.Navigation("ClientCommande");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ContactInfo", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Offre", "OffreContactInfo")
                        .WithMany("ContactInfoOffre")
                        .HasForeignKey("IdOffre")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ctf_ofr");

                    b.Navigation("OffreContactInfo");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ContenuCommande", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Coloris", "ColorisContenuCommande")
                        .WithMany("ContenuCommandeColoris")
                        .HasForeignKey("IdColoris")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ccm_cls");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Commande", "CommandeContenuCommande")
                        .WithMany("ContenuCommandeCommande")
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ccm_cmd");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Equipement", "EquipementContenuCommande")
                        .WithMany("ContenuCommandeEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ccm_equ");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Taille", "TailleContenuCommande")
                        .WithMany("ContenuCommandeTaille")
                        .HasForeignKey("IdTaille")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ccm_tle");

                    b.Navigation("ColorisContenuCommande");

                    b.Navigation("CommandeContenuCommande");

                    b.Navigation("EquipementContenuCommande");

                    b.Navigation("TailleContenuCommande");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Couleur", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoCouleur")
                        .WithMany("CouleurModeleMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_clr_mod");

                    b.Navigation("ModeleMotoCouleur");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.DemandeEssai", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Concessionnaire", "ConcessionnaireDemandeEssai")
                        .WithMany("DemandeEssaiConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dmd_con");

                    b.HasOne("SAE_4._01.Models.EntityFramework.ContactInfo", "ContactInfoDemandeEssai")
                        .WithMany("DemandeEssaiContactInfo")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dmd_ctf");

                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoDemandeEssai")
                        .WithMany("DemandeEssaiModeleMoto")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dmd_mod");

                    b.Navigation("ConcessionnaireDemandeEssai");

                    b.Navigation("ContactInfoDemandeEssai");

                    b.Navigation("ModeleMotoDemandeEssai");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Equipement", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.CategorieEquipement", "CategorieEquipementEquipement")
                        .WithMany("EquipementCategorieEquipement")
                        .HasForeignKey("IdCatEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_equ_cte");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Collection", "CollectionEquipement")
                        .WithMany("EquipementCollection")
                        .HasForeignKey("IdCollection")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_equ_cln");

                    b.Navigation("CategorieEquipementEquipement");

                    b.Navigation("CollectionEquipement");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.EstInclus", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Option", "OptionEstInclus")
                        .WithMany("EstInclusOption")
                        .HasForeignKey("IdOption")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ecl_opt");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Style", "StyleEstInclus")
                        .WithMany("EstInclusStyle")
                        .HasForeignKey("IdStyle")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ecl_sty");

                    b.Navigation("OptionEstInclus");

                    b.Navigation("StyleEstInclus");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.EstLie", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Equipement", "EquipementEstLie1")
                        .WithMany("EstLieEquipement1")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_eli_equ");

                    b.Navigation("EquipementEstLie1");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Garage", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientGarage")
                        .WithMany("GarageClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grg_clt");

                    b.HasOne("SAE_4._01.Models.EntityFramework.MotoConfigurable", "MotoConfigurableGarage")
                        .WithMany("GarageMotoConfigurable")
                        .HasForeignKey("IdMotoConfigurable")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grg_mcf");

                    b.Navigation("ClientGarage");

                    b.Navigation("MotoConfigurableGarage");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.InfoCB", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientInfoCB")
                        .WithMany("InfoCBClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_icb_clt");

                    b.Navigation("ClientInfoCB");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Media", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Equipement", "EquipementMedia")
                        .WithMany("MediaEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_med_equ");

                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoMedia")
                        .WithMany("MediaModeleMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_med_mod");

                    b.HasOne("SAE_4._01.Models.EntityFramework.PresentationEquipement", "PresentationEquipementMedia")
                        .WithMany("MediaPresentationEquipement")
                        .HasForeignKey("IdPresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_med_pre");

                    b.Navigation("EquipementMedia");

                    b.Navigation("ModeleMotoMedia");

                    b.Navigation("PresentationEquipementMedia");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ModeleMoto", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.GammeMoto", "GammeMotoModeleMoto")
                        .WithMany("ModeleMotoGammeMoto")
                        .HasForeignKey("IdGamme")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mod_gam");

                    b.Navigation("GammeMotoModeleMoto");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.MotoConfigurable", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoMotoConfigurable")
                        .WithMany("MotoConfigurableModeleMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mcf_mod");

                    b.Navigation("ModeleMotoMotoConfigurable");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.MotoDisponible", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoMotoDisponible")
                        .WithMany("MotoDisponibleModeleMoto")
                        .HasForeignKey("IdMotoDisponible")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mdp_mod");

                    b.Navigation("ModeleMotoMotoDisponible");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Offre", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Concessionnaire", "ConcessionnaireOffre")
                        .WithMany("OffreConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ofr_con");

                    b.HasOne("SAE_4._01.Models.EntityFramework.MotoConfigurable", "MotoConfigurableOffre")
                        .WithMany("OffreMotoConfigurable")
                        .HasForeignKey("IdMotoConfigurable")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ofr_mcf");

                    b.Navigation("ConcessionnaireOffre");

                    b.Navigation("MotoConfigurableOffre");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Pack", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoPack")
                        .WithMany("PackModeleMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pck_mod");

                    b.Navigation("ModeleMotoPack");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Prefere", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientPrefere")
                        .WithMany("PrefereClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prf_clt");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Concessionnaire", "ConcessionnairePrefere")
                        .WithMany("PrefereConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prf_con");

                    b.Navigation("ClientPrefere");

                    b.Navigation("ConcessionnairePrefere");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.PresentationEquipement", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Coloris", "ColorisPresentationEquipement")
                        .WithMany("PresentationEquipementColoris")
                        .HasForeignKey("IdColoris")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pre_cls");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Equipement", "EquipementPresentationEquipement")
                        .WithMany("PresentationEquipementEquipement")
                        .HasForeignKey("IdPresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pre_equ");

                    b.Navigation("ColorisPresentationEquipement");

                    b.Navigation("EquipementPresentationEquipement");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Prive", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientPrive")
                        .WithMany("PriveClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prv_clt");

                    b.Navigation("ClientPrive");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Professionnel", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientProfessionnel")
                        .WithMany("ProfessionnelClient")
                        .HasForeignKey("IdPro")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pro_clt");

                    b.Navigation("ClientProfessionnel");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Reservation", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientReservation")
                        .WithMany("ReservationClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_res_clt");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Concessionnaire", "ConcessionnaireReservation")
                        .WithMany("ReservationConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_res_con");

                    b.HasOne("SAE_4._01.Models.EntityFramework.MotoDisponible", "MotoDisponibleReservation")
                        .WithMany("ReservationMotoDisponible")
                        .HasForeignKey("IdReservation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_res_mdp");

                    b.Navigation("ClientReservation");

                    b.Navigation("ConcessionnaireReservation");

                    b.Navigation("MotoDisponibleReservation");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.SeCompose", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Option", "OptionSeCompose")
                        .WithMany("SeComposeOption")
                        .HasForeignKey("IdOption")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_scp_opt");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Pack", "PackSeCompose")
                        .WithMany("SeComposePack")
                        .HasForeignKey("IdPack")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_scp_pck");

                    b.Navigation("OptionSeCompose");

                    b.Navigation("PackSeCompose");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Specifie", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.MotoConfigurable", "MotoConfigurableSpecifie")
                        .WithMany("SpecifieMotoConfigurable")
                        .HasForeignKey("IdMotoConfigurable")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_spe_mcf");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Option", "OptionSpecifie")
                        .WithMany("SpecifieOption")
                        .HasForeignKey("IdOption")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_spe_opt");

                    b.Navigation("MotoConfigurableSpecifie");

                    b.Navigation("OptionSpecifie");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Stock", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Coloris", "ColorisStock")
                        .WithMany("StockColoris")
                        .HasForeignKey("IdColoris")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stk_cls");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Equipement", "EquipementStock")
                        .WithMany("StockEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stk_equ");

                    b.HasOne("SAE_4._01.Models.EntityFramework.Taille", "TailleStock")
                        .WithMany("StockTaille")
                        .HasForeignKey("IdTaille")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stk_tle");

                    b.Navigation("ColorisStock");

                    b.Navigation("EquipementStock");

                    b.Navigation("TailleStock");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Style", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.ModeleMoto", "ModeleMotoStyle")
                        .WithMany("StyleModeleMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sty_mod");

                    b.Navigation("ModeleMotoStyle");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Telephone", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientTelephone")
                        .WithMany("TelephoneClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientTelephone");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Transaction", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Commande", "CommandeTransaction")
                        .WithMany("TransactionCommande")
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tct_cmd");

                    b.Navigation("CommandeTransaction");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Users", b =>
                {
                    b.HasOne("SAE_4._01.Models.EntityFramework.Client", "ClientUsers")
                        .WithMany("UsersClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_usr_clt");

                    b.Navigation("ClientUsers");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Adresse", b =>
                {
                    b.Navigation("ClientAdresse");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieAccessoire", b =>
                {
                    b.Navigation("AccessoireCategorise");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieCaracteristique", b =>
                {
                    b.Navigation("CaracteristiqueCategorieCaracteristique");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.CategorieEquipement", b =>
                {
                    b.Navigation("CategorieEquipementCategorieEquipementProperty");

                    b.Navigation("EquipementCategorieEquipement");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Client", b =>
                {
                    b.Navigation("CommandeClient");

                    b.Navigation("GarageClient");

                    b.Navigation("InfoCBClient");

                    b.Navigation("PrefereClient");

                    b.Navigation("PriveClient");

                    b.Navigation("ProfessionnelClient");

                    b.Navigation("ReservationClient");

                    b.Navigation("TelephoneClient");

                    b.Navigation("UsersClient");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Collection", b =>
                {
                    b.Navigation("EquipementCollection");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Coloris", b =>
                {
                    b.Navigation("ContenuCommandeColoris");

                    b.Navigation("PresentationEquipementColoris");

                    b.Navigation("StockColoris");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Commande", b =>
                {
                    b.Navigation("ContenuCommandeCommande");

                    b.Navigation("TransactionCommande");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Concessionnaire", b =>
                {
                    b.Navigation("DemandeEssaiConcessionnaire");

                    b.Navigation("OffreConcessionnaire");

                    b.Navigation("PrefereConcessionnaire");

                    b.Navigation("ReservationConcessionnaire");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ContactInfo", b =>
                {
                    b.Navigation("DemandeEssaiContactInfo");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Equipement", b =>
                {
                    b.Navigation("ContenuCommandeEquipement");

                    b.Navigation("EstLieEquipement1");

                    b.Navigation("MediaEquipement");

                    b.Navigation("PresentationEquipementEquipement");

                    b.Navigation("StockEquipement");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.GammeMoto", b =>
                {
                    b.Navigation("ModeleMotoGammeMoto");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.ModeleMoto", b =>
                {
                    b.Navigation("AccessoireMoto");

                    b.Navigation("CaracteristiqueModeleMoto");

                    b.Navigation("CouleurModeleMoto");

                    b.Navigation("DemandeEssaiModeleMoto");

                    b.Navigation("MediaModeleMoto");

                    b.Navigation("MotoConfigurableModeleMoto");

                    b.Navigation("MotoDisponibleModeleMoto");

                    b.Navigation("PackModeleMoto");

                    b.Navigation("StyleModeleMoto");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.MotoConfigurable", b =>
                {
                    b.Navigation("GarageMotoConfigurable");

                    b.Navigation("OffreMotoConfigurable");

                    b.Navigation("SpecifieMotoConfigurable");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.MotoDisponible", b =>
                {
                    b.Navigation("ReservationMotoDisponible");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Offre", b =>
                {
                    b.Navigation("ContactInfoOffre");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Option", b =>
                {
                    b.Navigation("EstInclusOption");

                    b.Navigation("SeComposeOption");

                    b.Navigation("SpecifieOption");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Pack", b =>
                {
                    b.Navigation("SeComposePack");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Pays", b =>
                {
                    b.Navigation("AdressePays");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.PresentationEquipement", b =>
                {
                    b.Navigation("MediaPresentationEquipement");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Style", b =>
                {
                    b.Navigation("EstInclusStyle");
                });

            modelBuilder.Entity("SAE_4._01.Models.EntityFramework.Taille", b =>
                {
                    b.Navigation("ContenuCommandeTaille");

                    b.Navigation("StockTaille");
                });
#pragma warning restore 612, 618
        }
    }
}
